// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SWallet.Domain.Models;

#nullable disable

namespace SWallet.Domain.Migrations
{
    [DbContext(typeof(SwalletDbContext))]
    partial class SwalletDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SWallet.Domain.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<DateTime?>("DateVerified")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_verified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<bool?>("IsVerify")
                        .HasColumnType("bit")
                        .HasColumnName("is_verify");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("phone")
                        .IsFixedLength();

                    b.Property<int?>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("PK_tbl_account");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Activity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("store_id")
                        .IsFixedLength();

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("student_id")
                        .IsFixedLength();

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<string>("VoucherItemId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("voucher_item_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_tbl_activity");

                    b.HasIndex(new[] { "StoreId" }, "IX_tbl_activity_store_id");

                    b.HasIndex(new[] { "StudentId" }, "IX_tbl_activity_student_id");

                    b.HasIndex(new[] { "VoucherItemId" }, "IX_tbl_activity_voucher_item_id");

                    b.ToTable("activity", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.ActivityTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("ActivityId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("activity_id")
                        .IsFixedLength();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("rate");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("WalletId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("wallet_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_tbl_activity_transaction");

                    b.HasIndex(new[] { "ActivityId" }, "IX_tbl_activity_transaction_activity_id");

                    b.HasIndex(new[] { "WalletId" }, "IX_tbl_activity_transaction_wallet_id");

                    b.ToTable("activity_transaction", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Admin", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("account_id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_tbl_admin");

                    b.HasIndex(new[] { "AccountId" }, "IX_tbl_admin_account_id");

                    b.ToTable("admin", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Area", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("area_name");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_tbl_area");

                    b.ToTable("area", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Brand", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("account_id")
                        .IsFixedLength();

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("acronym");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("brand_name");

                    b.Property<TimeOnly?>("ClosingHours")
                        .HasColumnType("time")
                        .HasColumnName("closing_hours");

                    b.Property<string>("CoverFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cover_file_name");

                    b.Property<string>("CoverPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cover_photo");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link");

                    b.Property<TimeOnly?>("OpeningHours")
                        .HasColumnType("time")
                        .HasColumnName("opening_hours");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalIncome")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("total_income");

                    b.Property<decimal?>("TotalSpending")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("total_spending");

                    b.HasKey("Id")
                        .HasName("PK_tbl_brand");

                    b.HasIndex(new[] { "AccountId" }, "IX_tbl_brand_account_id");

                    b.ToTable("brand", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Campaign", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("BrandId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("brand_id")
                        .IsFixedLength();

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("campaign_name");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("condition");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<DateOnly?>("EndOn")
                        .HasColumnType("date")
                        .HasColumnName("end_on");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_name");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link");

                    b.Property<DateOnly?>("StartOn")
                        .HasColumnType("date")
                        .HasColumnName("start_on");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalIncome")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("total_income");

                    b.Property<decimal?>("TotalSpending")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("total_spending");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("type_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_tbl_campaign");

                    b.HasIndex(new[] { "BrandId" }, "IX_tbl_campaign_brand_id");

                    b.HasIndex(new[] { "TypeId" }, "IX_tbl_campaign_type_id");

                    b.ToTable("campaign", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.CampaignCampus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("campaign_id")
                        .IsFixedLength();

                    b.Property<string>("CampusId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("campus_id")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_tbl_campaign_campus");

                    b.HasIndex(new[] { "CampaignId" }, "IX_tbl_campaign_campus_campaign_id");

                    b.HasIndex(new[] { "CampusId" }, "IX_tbl_campaign_campus_campus_id");

                    b.ToTable("campaign_campus", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.CampaignDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("campaign_id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("FromIndex")
                        .HasColumnType("int")
                        .HasColumnName("from_index");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("rate");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int?>("ToIndex")
                        .HasColumnType("int")
                        .HasColumnName("to_index");

                    b.Property<string>("VoucherId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("voucher_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_tbl_campaign_detail");

                    b.HasIndex(new[] { "CampaignId" }, "IX_tbl_campaign_detail_campaign_id");

                    b.HasIndex(new[] { "VoucherId" }, "IX_tbl_campaign_detail_voucher_id");

                    b.ToTable("campaign_detail", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.CampaignStore", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("campaign_id")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("store_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_tbl_campaign_store");

                    b.HasIndex(new[] { "CampaignId" }, "IX_tbl_campaign_store_campaign_id");

                    b.HasIndex(new[] { "StoreId" }, "IX_tbl_campaign_store_store_id");

                    b.ToTable("campaign_store", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.CampaignTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("campaign_id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("rate");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("WalletId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("wallet_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_tbl_campaign_transaction");

                    b.HasIndex(new[] { "CampaignId" }, "IX_tbl_campaign_transaction_campaign_id");

                    b.HasIndex(new[] { "WalletId" }, "IX_tbl_campaign_transaction_wallet_id");

                    b.ToTable("campaign_transaction", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.CampaignType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("type_name");

                    b.HasKey("Id")
                        .HasName("PK_tbl_campaign_type");

                    b.ToTable("campaign_type", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Campus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("area_id")
                        .IsFixedLength();

                    b.Property<string>("CampusName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("campus_name");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("LinkWebsite")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_website");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("phone")
                        .IsFixedLength();

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_tbl_campus");

                    b.HasIndex(new[] { "AreaId" }, "IX_tbl_campus_area_id");

                    b.ToTable("campus", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_tbl_category");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Challenge", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("ChallengeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("challenge_name");

                    b.Property<decimal?>("Condition")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("condition");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK_tbl_challenge");

                    b.ToTable("challenge", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.ChallengeTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("ChallengeId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("challenge_id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("rate");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("WalletId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("wallet_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_tbl_challenge_transaction");

                    b.HasIndex(new[] { "ChallengeId" }, "IX_tbl_challenge_transaction_challenge_id");

                    b.HasIndex(new[] { "WalletId" }, "IX_tbl_challenge_transaction_wallet_id");

                    b.ToTable("challenge_transaction", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Invitation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("InviteeId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("invitee_id")
                        .IsFixedLength();

                    b.Property<string>("InviterId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("inviter_id")
                        .IsFixedLength();

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_tbl_invitation");

                    b.HasIndex(new[] { "InviteeId" }, "IX_tbl_invitation_invitee_id");

                    b.HasIndex(new[] { "InviterId" }, "IX_tbl_invitation_inviter_id");

                    b.ToTable("invitation", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Lecturer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("account_id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_tbl_staff");

                    b.HasIndex(new[] { "AccountId" }, "IX_tbl_staff_account_id");

                    b.ToTable("lecturer", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<string>("StationId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("station_id")
                        .IsFixedLength();

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("student_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_tbl_order");

                    b.HasIndex(new[] { "StationId" }, "IX_tbl_order_station_id");

                    b.HasIndex(new[] { "StudentId" }, "IX_tbl_order_student_id");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("order_id")
                        .IsFixedLength();

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("product_id")
                        .IsFixedLength();

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_tbl_order_detail");

                    b.HasIndex(new[] { "OrderId" }, "IX_tbl_order_detail_order_id");

                    b.HasIndex(new[] { "ProductId" }, "IX_tbl_order_detail_product_id");

                    b.ToTable("order_detail", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.OrderState", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("order_id")
                        .IsFixedLength();

                    b.Property<int?>("State")
                        .HasColumnType("int")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_tbl_order_state");

                    b.HasIndex(new[] { "OrderId" }, "IX_tbl_order_state_order_id");

                    b.ToTable("order_state", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.OrderTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("order_id")
                        .IsFixedLength();

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("rate");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("WalletId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("wallet_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_tbl_order_transaction");

                    b.HasIndex(new[] { "OrderId" }, "IX_tbl_order_transaction_order_id");

                    b.HasIndex(new[] { "WalletId" }, "IX_tbl_order_transaction_wallet_id");

                    b.ToTable("order_transaction", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("category_id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("product_name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("PK_tbl_product");

                    b.HasIndex(new[] { "CategoryId" }, "IX_tbl_product_category_id");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Request", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("admin_id")
                        .IsFixedLength();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("BrandId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("brand_id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_tbl_request");

                    b.HasIndex(new[] { "AdminId" }, "IX_tbl_request_admin_id");

                    b.HasIndex(new[] { "BrandId" }, "IX_tbl_request_brand_id");

                    b.ToTable("request", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.RequestTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("rate");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("request_id")
                        .IsFixedLength();

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("WalletId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("wallet_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_tbl_request_transaction");

                    b.HasIndex(new[] { "RequestId" }, "IX_tbl_request_transaction_request_id");

                    b.HasIndex(new[] { "WalletId" }, "IX_tbl_request_transaction_wallet_id");

                    b.ToTable("request_transaction", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Reward", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("BrandId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("brand_id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("store_id")
                        .IsFixedLength();

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("student_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_tbl_bonus");

                    b.HasIndex(new[] { "BrandId" }, "IX_tbl_bonus_brand_id");

                    b.HasIndex(new[] { "StoreId" }, "IX_tbl_bonus_store_id");

                    b.HasIndex(new[] { "StudentId" }, "IX_tbl_bonus_student_id");

                    b.ToTable("reward", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.RewardTransaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("BonusId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("bonus_id")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("rate");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("WalletId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("wallet_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_tbl_bonus_transaction");

                    b.HasIndex(new[] { "BonusId" }, "IX_tbl_bonus_transaction_bonus_id");

                    b.HasIndex(new[] { "WalletId" }, "IX_tbl_bonus_transaction_wallet_id");

                    b.ToTable("reward_transaction", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Station", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<TimeOnly?>("ClosingHours")
                        .HasColumnType("time")
                        .HasColumnName("closing_hours");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<TimeOnly?>("OpeningHours")
                        .HasColumnType("time")
                        .HasColumnName("opening_hours");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .HasColumnName("phone")
                        .IsFixedLength();

                    b.Property<int?>("State")
                        .HasColumnType("int")
                        .HasColumnName("state");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("station_name");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_tbl_station");

                    b.ToTable("station", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Store", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("account_id")
                        .IsFixedLength();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("area_id")
                        .IsFixedLength();

                    b.Property<string>("BrandId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("brand_id")
                        .IsFixedLength();

                    b.Property<TimeOnly?>("ClosingHours")
                        .HasColumnType("time")
                        .HasColumnName("closing_hours");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<TimeOnly?>("OpeningHours")
                        .HasColumnType("time")
                        .HasColumnName("opening_hours");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("store_name");

                    b.HasKey("Id")
                        .HasName("PK_tbl_store");

                    b.HasIndex(new[] { "AccountId" }, "IX_tbl_store_account_id");

                    b.HasIndex(new[] { "AreaId" }, "IX_tbl_store_area_id");

                    b.HasIndex(new[] { "BrandId" }, "IX_tbl_store_brand_id");

                    b.ToTable("store", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("account_id")
                        .IsFixedLength();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("CampusId")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("campus_id")
                        .IsFixedLength();

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("FileNameBack")
                        .HasColumnType("text")
                        .HasColumnName("file_name_back");

                    b.Property<string>("FileNameFront")
                        .HasColumnType("text")
                        .HasColumnName("file_name_front");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<int?>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<int?>("State")
                        .HasColumnType("int")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("StudentCardBack")
                        .HasColumnType("text")
                        .HasColumnName("student_card_back");

                    b.Property<string>("StudentCardFront")
                        .HasColumnType("text")
                        .HasColumnName("student_card_front");

                    b.Property<decimal?>("TotalIncome")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("total_income");

                    b.Property<decimal?>("TotalSpending")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("total_spending");

                    b.HasKey("Id")
                        .HasName("PK_tbl_student");

                    b.HasIndex(new[] { "AccountId" }, "IX_tbl_student_account_id");

                    b.HasIndex(new[] { "CampusId" }, "IX_tbl_student_campus_id");

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.StudentChallenge", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("ChallengeId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("challenge_id")
                        .IsFixedLength();

                    b.Property<decimal?>("Condition")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("condition");

                    b.Property<decimal?>("Current")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("current");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_completed");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("student_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_tbl_student_challenge");

                    b.HasIndex(new[] { "ChallengeId" }, "IX_tbl_student_challenge_challenge_id");

                    b.HasIndex(new[] { "StudentId" }, "IX_tbl_student_challenge_student_id");

                    b.ToTable("student_challenge", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Voucher", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("BrandId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("brand_id")
                        .IsFixedLength();

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("condition");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("price");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("rate");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("type_id")
                        .IsFixedLength();

                    b.Property<string>("VoucherName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("voucher_name");

                    b.HasKey("Id")
                        .HasName("PK_tbl_voucher");

                    b.HasIndex(new[] { "BrandId" }, "IX_tbl_voucher_brand_id");

                    b.HasIndex(new[] { "TypeId" }, "IX_tbl_voucher_type_id");

                    b.ToTable("voucher", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.VoucherItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<string>("CampaignDetailId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("campaign_detail_id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateIssued")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_issued");

                    b.Property<DateOnly?>("ExpireOn")
                        .HasColumnType("date")
                        .HasColumnName("expire_on");

                    b.Property<int?>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index");

                    b.Property<bool?>("IsBought")
                        .HasColumnType("bit")
                        .HasColumnName("is_bought");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("bit")
                        .HasColumnName("is_locked");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("bit")
                        .HasColumnName("is_used");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateOnly?>("ValidOn")
                        .HasColumnType("date")
                        .HasColumnName("valid_on");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("voucher_code");

                    b.Property<string>("VoucherId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("voucher_id")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PK_tbl_voucher_item");

                    b.HasIndex(new[] { "CampaignDetailId" }, "IX_tbl_voucher_item_campaign_detail_id");

                    b.HasIndex(new[] { "VoucherId" }, "IX_tbl_voucher_item_voucher_id");

                    b.ToTable("voucher_item", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.VoucherType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("type_name");

                    b.HasKey("Id")
                        .HasName("PK_tbl_voucher_type");

                    b.ToTable("voucher_type", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("id")
                        .IsFixedLength();

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("balance");

                    b.Property<string>("BrandId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("brand_id")
                        .IsFixedLength();

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("campaign_id")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("State")
                        .HasColumnType("bit")
                        .HasColumnName("state");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .IsUnicode(false)
                        .HasColumnType("char(26)")
                        .HasColumnName("student_id")
                        .IsFixedLength();

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK_tbl_wallet");

                    b.HasIndex(new[] { "BrandId" }, "IX_tbl_wallet_brand_id");

                    b.HasIndex(new[] { "CampaignId" }, "IX_tbl_wallet_campaign_id");

                    b.HasIndex(new[] { "StudentId" }, "IX_tbl_wallet_student_id");

                    b.ToTable("wallet", (string)null);
                });

            modelBuilder.Entity("SWallet.Domain.Models.Activity", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Store", "Store")
                        .WithMany("Activities")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_activity_tbl_store_store_id");

                    b.HasOne("SWallet.Domain.Models.Student", "Student")
                        .WithMany("Activities")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_activity_tbl_student_student_id");

                    b.HasOne("SWallet.Domain.Models.VoucherItem", "VoucherItem")
                        .WithMany("Activities")
                        .HasForeignKey("VoucherItemId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_activity_tbl_voucher_item_voucher_item_id");

                    b.Navigation("Store");

                    b.Navigation("Student");

                    b.Navigation("VoucherItem");
                });

            modelBuilder.Entity("SWallet.Domain.Models.ActivityTransaction", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Activity", "Activity")
                        .WithMany("ActivityTransactions")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_activity_transaction_tbl_activity_activity_id");

                    b.HasOne("SWallet.Domain.Models.Wallet", "Wallet")
                        .WithMany("ActivityTransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_activity_transaction_tbl_wallet_wallet_id");

                    b.Navigation("Activity");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Admin", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Account", "Account")
                        .WithMany("Admins")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_admin_tbl_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Brand", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Account", "Account")
                        .WithMany("Brands")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_brand_tbl_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Campaign", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Brand", "Brand")
                        .WithMany("Campaigns")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_campaign_tbl_brand_brand_id");

                    b.HasOne("SWallet.Domain.Models.CampaignType", "Type")
                        .WithMany("Campaigns")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_campaign_tbl_campaign_type_type_id");

                    b.Navigation("Brand");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SWallet.Domain.Models.CampaignCampus", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Campaign", "Campaign")
                        .WithMany("CampaignCampuses")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_campaign_campus_tbl_campaign_campaign_id");

                    b.HasOne("SWallet.Domain.Models.Campus", "Campus")
                        .WithMany("CampaignCampuses")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_campaign_campus_tbl_campus_campus_id");

                    b.Navigation("Campaign");

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("SWallet.Domain.Models.CampaignDetail", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Campaign", "Campaign")
                        .WithMany("CampaignDetails")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_campaign_detail_tbl_campaign_campaign_id");

                    b.HasOne("SWallet.Domain.Models.Voucher", "Voucher")
                        .WithMany("CampaignDetails")
                        .HasForeignKey("VoucherId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_campaign_detail_tbl_voucher_voucher_id");

                    b.Navigation("Campaign");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SWallet.Domain.Models.CampaignStore", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Campaign", "Campaign")
                        .WithMany("CampaignStores")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_campaign_store_tbl_campaign_campaign_id");

                    b.HasOne("SWallet.Domain.Models.Store", "Store")
                        .WithMany("CampaignStores")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_campaign_store_tbl_store_store_id");

                    b.Navigation("Campaign");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SWallet.Domain.Models.CampaignTransaction", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Campaign", "Campaign")
                        .WithMany("CampaignTransactions")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_campaign_transaction_tbl_campaign_campaign_id");

                    b.HasOne("SWallet.Domain.Models.Wallet", "Wallet")
                        .WithMany("CampaignTransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_campaign_transaction_tbl_wallet_wallet_id");

                    b.Navigation("Campaign");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Campus", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Area", "Area")
                        .WithMany("Campuses")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_campus_tbl_area_area_id");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("SWallet.Domain.Models.ChallengeTransaction", b =>
                {
                    b.HasOne("SWallet.Domain.Models.StudentChallenge", "Challenge")
                        .WithMany("ChallengeTransactions")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_challenge_transaction_tbl_student_challenge_challenge_id");

                    b.HasOne("SWallet.Domain.Models.Wallet", "Wallet")
                        .WithMany("ChallengeTransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_challenge_transaction_tbl_wallet_wallet_id");

                    b.Navigation("Challenge");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Invitation", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Student", "Invitee")
                        .WithMany("InvitationInvitees")
                        .HasForeignKey("InviteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_invitation_tbl_student_invitee_id");

                    b.HasOne("SWallet.Domain.Models.Student", "Inviter")
                        .WithMany("InvitationInviters")
                        .HasForeignKey("InviterId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_invitation_tbl_student_inviter_id");

                    b.Navigation("Invitee");

                    b.Navigation("Inviter");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Lecturer", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Account", "Account")
                        .WithMany("Lecturers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_staff_tbl_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Order", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Station", "Station")
                        .WithMany("Orders")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_order_tbl_station_station_id");

                    b.HasOne("SWallet.Domain.Models.Student", "Student")
                        .WithMany("Orders")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_order_tbl_student_student_id");

                    b.Navigation("Station");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SWallet.Domain.Models.OrderDetail", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_order_detail_tbl_order_order_id");

                    b.HasOne("SWallet.Domain.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_order_detail_tbl_product_product_id");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SWallet.Domain.Models.OrderState", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Order", "Order")
                        .WithMany("OrderStates")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_order_state_tbl_order_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SWallet.Domain.Models.OrderTransaction", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Order", "Order")
                        .WithMany("OrderTransactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_order_transaction_tbl_order_order_id");

                    b.HasOne("SWallet.Domain.Models.Wallet", "Wallet")
                        .WithMany("OrderTransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_order_transaction_tbl_wallet_wallet_id");

                    b.Navigation("Order");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Product", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_product_tbl_category_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Request", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Admin", "Admin")
                        .WithMany("Requests")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_request_tbl_admin_admin_id");

                    b.HasOne("SWallet.Domain.Models.Brand", "Brand")
                        .WithMany("Requests")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_request_tbl_brand_brand_id");

                    b.Navigation("Admin");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("SWallet.Domain.Models.RequestTransaction", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Request", "Request")
                        .WithMany("RequestTransactions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_request_transaction_tbl_request_request_id");

                    b.HasOne("SWallet.Domain.Models.Wallet", "Wallet")
                        .WithMany("RequestTransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_request_transaction_tbl_wallet_wallet_id");

                    b.Navigation("Request");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Reward", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Brand", "Brand")
                        .WithMany("Rewards")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_bonus_tbl_brand_brand_id");

                    b.HasOne("SWallet.Domain.Models.Store", "Store")
                        .WithMany("Rewards")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_bonus_tbl_store_store_id");

                    b.HasOne("SWallet.Domain.Models.Student", "Student")
                        .WithMany("Rewards")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_bonus_tbl_student_student_id");

                    b.Navigation("Brand");

                    b.Navigation("Store");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SWallet.Domain.Models.RewardTransaction", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Reward", "Bonus")
                        .WithMany("RewardTransactions")
                        .HasForeignKey("BonusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_bonus_transaction_tbl_bonus_bonus_id");

                    b.HasOne("SWallet.Domain.Models.Wallet", "Wallet")
                        .WithMany("RewardTransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_bonus_transaction_tbl_wallet_wallet_id");

                    b.Navigation("Bonus");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Store", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Account", "Account")
                        .WithMany("Stores")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_store_tbl_account_account_id");

                    b.HasOne("SWallet.Domain.Models.Area", "Area")
                        .WithMany("Stores")
                        .HasForeignKey("AreaId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_store_tbl_area_area_id");

                    b.HasOne("SWallet.Domain.Models.Brand", "Brand")
                        .WithMany("Stores")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_store_tbl_brand_brand_id");

                    b.Navigation("Account");

                    b.Navigation("Area");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Student", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Account", "Account")
                        .WithMany("Students")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_student_tbl_account_account_id");

                    b.HasOne("SWallet.Domain.Models.Campus", "Campus")
                        .WithMany("Students")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tbl_student_tbl_campus_campus_id");

                    b.Navigation("Account");

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("SWallet.Domain.Models.StudentChallenge", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Challenge", "Challenge")
                        .WithMany("StudentChallenges")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_student_challenge_tbl_challenge_challenge_id");

                    b.HasOne("SWallet.Domain.Models.Student", "Student")
                        .WithMany("StudentChallenges")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_student_challenge_tbl_student_student_id");

                    b.Navigation("Challenge");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Voucher", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Brand", "Brand")
                        .WithMany("Vouchers")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_voucher_tbl_brand_brand_id");

                    b.HasOne("SWallet.Domain.Models.VoucherType", "Type")
                        .WithMany("Vouchers")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_voucher_tbl_voucher_type_type_id");

                    b.Navigation("Brand");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SWallet.Domain.Models.VoucherItem", b =>
                {
                    b.HasOne("SWallet.Domain.Models.CampaignDetail", "CampaignDetail")
                        .WithMany("VoucherItems")
                        .HasForeignKey("CampaignDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_voucher_item_tbl_campaign_detail_campaign_detail_id");

                    b.HasOne("SWallet.Domain.Models.Voucher", "Voucher")
                        .WithMany("VoucherItems")
                        .HasForeignKey("VoucherId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_voucher_item_tbl_voucher_voucher_id");

                    b.Navigation("CampaignDetail");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Wallet", b =>
                {
                    b.HasOne("SWallet.Domain.Models.Brand", "Brand")
                        .WithMany("Wallets")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tbl_wallet_tbl_brand_brand_id");

                    b.HasOne("SWallet.Domain.Models.Campaign", "Campaign")
                        .WithMany("Wallets")
                        .HasForeignKey("CampaignId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_wallet_tbl_campaign_campaign_id");

                    b.HasOne("SWallet.Domain.Models.Student", "Student")
                        .WithMany("Wallets")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_wallet_tbl_student_student_id");

                    b.Navigation("Brand");

                    b.Navigation("Campaign");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Account", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Brands");

                    b.Navigation("Lecturers");

                    b.Navigation("Stores");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Activity", b =>
                {
                    b.Navigation("ActivityTransactions");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Admin", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Area", b =>
                {
                    b.Navigation("Campuses");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Brand", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Requests");

                    b.Navigation("Rewards");

                    b.Navigation("Stores");

                    b.Navigation("Vouchers");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Campaign", b =>
                {
                    b.Navigation("CampaignCampuses");

                    b.Navigation("CampaignDetails");

                    b.Navigation("CampaignStores");

                    b.Navigation("CampaignTransactions");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("SWallet.Domain.Models.CampaignDetail", b =>
                {
                    b.Navigation("VoucherItems");
                });

            modelBuilder.Entity("SWallet.Domain.Models.CampaignType", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Campus", b =>
                {
                    b.Navigation("CampaignCampuses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Challenge", b =>
                {
                    b.Navigation("StudentChallenges");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("OrderStates");

                    b.Navigation("OrderTransactions");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Request", b =>
                {
                    b.Navigation("RequestTransactions");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Reward", b =>
                {
                    b.Navigation("RewardTransactions");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Station", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Store", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("CampaignStores");

                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Student", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("InvitationInvitees");

                    b.Navigation("InvitationInviters");

                    b.Navigation("Orders");

                    b.Navigation("Rewards");

                    b.Navigation("StudentChallenges");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("SWallet.Domain.Models.StudentChallenge", b =>
                {
                    b.Navigation("ChallengeTransactions");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Voucher", b =>
                {
                    b.Navigation("CampaignDetails");

                    b.Navigation("VoucherItems");
                });

            modelBuilder.Entity("SWallet.Domain.Models.VoucherItem", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("SWallet.Domain.Models.VoucherType", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("SWallet.Domain.Models.Wallet", b =>
                {
                    b.Navigation("ActivityTransactions");

                    b.Navigation("CampaignTransactions");

                    b.Navigation("ChallengeTransactions");

                    b.Navigation("OrderTransactions");

                    b.Navigation("RequestTransactions");

                    b.Navigation("RewardTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
